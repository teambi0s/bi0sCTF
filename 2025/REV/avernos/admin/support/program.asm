MOV_REG_IMM R1, 0
MOV_REG_IMM R2, 1
MOV_REG_IMM R3, 2
MOV_REG_IMM R4, 3

STORE 0, R1
STORE 1, R2
STORE 2, R3
STORE 3, R4


MOV_REG_IMM R1, 4
MOV_REG_IMM R2, 5
MOV_REG_IMM R3, 6
MOV_REG_IMM R4, 7

STORE 4, R1
STORE 5, R2
STORE 6, R3
STORE 7, R4


MOV_REG_IMM R1, 8
MOV_REG_IMM R2, 9
MOV_REG_IMM R3, 10
MOV_REG_IMM R4, 11

STORE 8, R1
STORE 9, R2
STORE 10, R3
STORE 11, R4


MOV_REG_IMM R1, 12
MOV_REG_IMM R2, 13
MOV_REG_IMM R3, 14
MOV_REG_IMM R4, 15

STORE 12, R1
STORE 13, R2
STORE 14, R3
STORE 15, R4


MOV_REG_IMM R1, 16
MOV_REG_IMM R2, 17
MOV_REG_IMM R3, 18
MOV_REG_IMM R4, 19

STORE 16, R1
STORE 17, R2
STORE 18, R3
STORE 19, R4


MOV_REG_IMM R1, 20
MOV_REG_IMM R2, 21
MOV_REG_IMM R3, 22
MOV_REG_IMM R4, 23

STORE 20, R1
STORE 21, R2
STORE 22, R3
STORE 23, R4


MOV_REG_IMM R1, 24
MOV_REG_IMM R2, 25
MOV_REG_IMM R3, 26
MOV_REG_IMM R4, 27

STORE 24, R1
STORE 25, R2
STORE 26, R3
STORE 27, R4


MOV_REG_IMM R1, 28
MOV_REG_IMM R2, 29
MOV_REG_IMM R3, 30
MOV_REG_IMM R4, 31

STORE 28, R1
STORE 29, R2
STORE 30, R3
STORE 31, R4


MOV_REG_IMM R1, 32
MOV_REG_IMM R2, 33
MOV_REG_IMM R3, 34
MOV_REG_IMM R4, 35

STORE 32, R1
STORE 33, R2
STORE 34, R3
STORE 35, R4


MOV_REG_IMM R1, 36
MOV_REG_IMM R2, 37
MOV_REG_IMM R3, 38
MOV_REG_IMM R4, 39

STORE 36, R1
STORE 37, R2
STORE 38, R3
STORE 39, R4


MOV_REG_IMM R1, 40
MOV_REG_IMM R2, 41
MOV_REG_IMM R3, 42
MOV_REG_IMM R4, 43

STORE 40, R1
STORE 41, R2
STORE 42, R3
STORE 43, R4


MOV_REG_IMM R1, 44
MOV_REG_IMM R2, 45
MOV_REG_IMM R3, 46
MOV_REG_IMM R4, 47

STORE 44, R1
STORE 45, R2
STORE 46, R3
STORE 47, R4


MOV_REG_IMM R1, 48
MOV_REG_IMM R2, 49
MOV_REG_IMM R3, 50
MOV_REG_IMM R4, 51

STORE 48, R1
STORE 49, R2
STORE 50, R3
STORE 51, R4


MOV_REG_IMM R1, 52
MOV_REG_IMM R2, 53
MOV_REG_IMM R3, 54
MOV_REG_IMM R4, 55

STORE 52, R1
STORE 53, R2
STORE 54, R3
STORE 55, R4


MOV_REG_IMM R1, 56
MOV_REG_IMM R2, 57
MOV_REG_IMM R3, 58
MOV_REG_IMM R4, 59

STORE 56, R1
STORE 57, R2
STORE 58, R3
STORE 59, R4


MOV_REG_IMM R1, 60
MOV_REG_IMM R2, 61
MOV_REG_IMM R3, 62
MOV_REG_IMM R4, 63

STORE 60, R1
STORE 61, R2
STORE 62, R3
STORE 63, R4


MOV_REG_IMM R1, 64
MOV_REG_IMM R2, 65
MOV_REG_IMM R3, 66
MOV_REG_IMM R4, 67

STORE 64, R1
STORE 65, R2
STORE 66, R3
STORE 67, R4


MOV_REG_IMM R1, 68
MOV_REG_IMM R2, 69
MOV_REG_IMM R3, 70
MOV_REG_IMM R4, 71

STORE 68, R1
STORE 69, R2
STORE 70, R3
STORE 71, R4


MOV_REG_IMM R1, 72
MOV_REG_IMM R2, 73
MOV_REG_IMM R3, 74
MOV_REG_IMM R4, 75

STORE 72, R1
STORE 73, R2
STORE 74, R3
STORE 75, R4


MOV_REG_IMM R1, 76
MOV_REG_IMM R2, 77
MOV_REG_IMM R3, 78
MOV_REG_IMM R4, 79

STORE 76, R1
STORE 77, R2
STORE 78, R3
STORE 79, R4


MOV_REG_IMM R1, 80
MOV_REG_IMM R2, 81
MOV_REG_IMM R3, 82
MOV_REG_IMM R4, 83

STORE 80, R1
STORE 81, R2
STORE 82, R3
STORE 83, R4


MOV_REG_IMM R1, 84
MOV_REG_IMM R2, 85
MOV_REG_IMM R3, 86
MOV_REG_IMM R4, 87

STORE 84, R1
STORE 85, R2
STORE 86, R3
STORE 87, R4


MOV_REG_IMM R1, 88
MOV_REG_IMM R2, 89
MOV_REG_IMM R3, 90
MOV_REG_IMM R4, 91

STORE 88, R1
STORE 89, R2
STORE 90, R3
STORE 91, R4


MOV_REG_IMM R1, 92
MOV_REG_IMM R2, 93
MOV_REG_IMM R3, 94
MOV_REG_IMM R4, 95

STORE 92, R1
STORE 93, R2
STORE 94, R3
STORE 95, R4


MOV_REG_IMM R1, 96
MOV_REG_IMM R2, 97
MOV_REG_IMM R3, 98
MOV_REG_IMM R4, 99

STORE 96, R1
STORE 97, R2
STORE 98, R3
STORE 99, R4


MOV_REG_IMM R1, 100
MOV_REG_IMM R2, 101
MOV_REG_IMM R3, 102
MOV_REG_IMM R4, 103

STORE 100, R1
STORE 101, R2
STORE 102, R3
STORE 103, R4


MOV_REG_IMM R1, 104
MOV_REG_IMM R2, 105
MOV_REG_IMM R3, 106
MOV_REG_IMM R4, 107

STORE 104, R1
STORE 105, R2
STORE 106, R3
STORE 107, R4


MOV_REG_IMM R1, 108
MOV_REG_IMM R2, 109
MOV_REG_IMM R3, 110
MOV_REG_IMM R4, 111

STORE 108, R1
STORE 109, R2
STORE 110, R3
STORE 111, R4


MOV_REG_IMM R1, 112
MOV_REG_IMM R2, 113
MOV_REG_IMM R3, 114
MOV_REG_IMM R4, 115

MOV_REG_IMM R1, 0x59 
MOV_REG_IMM R2, 0x32 
MOV_REG_IMM R3, 0x5c 
MOV_REG_IMM R4, 0x64 

STORE 112, R1
STORE 113, R2
STORE 114, R3
STORE 115, R4


MOV_REG_IMM R1, 116
MOV_REG_IMM R2, 117
MOV_REG_IMM R3, 118
MOV_REG_IMM R4, 119

STORE 116, R1
STORE 117, R2
STORE 118, R3
STORE 119, R4


MOV_REG_IMM R1, 120
MOV_REG_IMM R2, 121
MOV_REG_IMM R3, 122
MOV_REG_IMM R4, 123

STORE 120, R1
STORE 121, R2
STORE 122, R3
STORE 123, R4


MOV_REG_IMM R1, 124
MOV_REG_IMM R2, 125
MOV_REG_IMM R3, 126
MOV_REG_IMM R4, 127

STORE 124, R1
STORE 125, R2
STORE 126, R3
STORE 127, R4


MOV_REG_IMM R1, 128
MOV_REG_IMM R2, 129
MOV_REG_IMM R3, 130
MOV_REG_IMM R4, 131

STORE 128, R1
STORE 129, R2
STORE 130, R3
STORE 131, R4


MOV_REG_IMM R1, 132
MOV_REG_IMM R2, 133
MOV_REG_IMM R3, 134
MOV_REG_IMM R4, 135

STORE 132, R1
STORE 133, R2
STORE 134, R3
STORE 135, R4


MOV_REG_IMM R1, 136
MOV_REG_IMM R2, 137
MOV_REG_IMM R3, 138
MOV_REG_IMM R4, 139

STORE 136, R1
STORE 137, R2
STORE 138, R3
STORE 139, R4


MOV_REG_IMM R1, 140
MOV_REG_IMM R2, 141
MOV_REG_IMM R3, 142
MOV_REG_IMM R4, 143

STORE 140, R1
STORE 141, R2
STORE 142, R3
STORE 143, R4


MOV_REG_IMM R1, 144
MOV_REG_IMM R2, 145
MOV_REG_IMM R3, 146
MOV_REG_IMM R4, 147

STORE 144, R1
STORE 145, R2
STORE 146, R3
STORE 147, R4


MOV_REG_IMM R1, 148
MOV_REG_IMM R2, 149
MOV_REG_IMM R3, 150
MOV_REG_IMM R4, 151

STORE 148, R1
STORE 149, R2
STORE 150, R3
STORE 151, R4


MOV_REG_IMM R1, 152
MOV_REG_IMM R2, 153
MOV_REG_IMM R3, 154
MOV_REG_IMM R4, 155

STORE 152, R1
STORE 153, R2
STORE 154, R3
STORE 155, R4


MOV_REG_IMM R1, 156
MOV_REG_IMM R2, 157
MOV_REG_IMM R3, 158
MOV_REG_IMM R4, 159

STORE 156, R1
STORE 157, R2
STORE 158, R3
STORE 159, R4


MOV_REG_IMM R1, 160
MOV_REG_IMM R2, 161
MOV_REG_IMM R3, 162
MOV_REG_IMM R4, 163

STORE 160, R1
STORE 161, R2
STORE 162, R3
STORE 163, R4


MOV_REG_IMM R1, 164
MOV_REG_IMM R2, 165
MOV_REG_IMM R3, 166
MOV_REG_IMM R4, 167

MOV_REG_IMM R1, 0x7e 
MOV_REG_IMM R2, 0x6d 
MOV_REG_IMM R3, 0x5a 
MOV_REG_IMM R4, 0x71 

STORE 164, R1
STORE 165, R2
STORE 166, R3
STORE 167, R4


MOV_REG_IMM R1, 168
MOV_REG_IMM R2, 169
MOV_REG_IMM R3, 170
MOV_REG_IMM R4, 171

STORE 168, R1
STORE 169, R2
STORE 170, R3
STORE 171, R4


MOV_REG_IMM R1, 172
MOV_REG_IMM R2, 173
MOV_REG_IMM R3, 174
MOV_REG_IMM R4, 175

STORE 172, R1
STORE 173, R2
STORE 174, R3
STORE 175, R4


MOV_REG_IMM R1, 176
MOV_REG_IMM R2, 177
MOV_REG_IMM R3, 178
MOV_REG_IMM R4, 179

STORE 176, R1
STORE 177, R2
STORE 178, R3
STORE 179, R4


MOV_REG_IMM R1, 180
MOV_REG_IMM R2, 181
MOV_REG_IMM R3, 182
MOV_REG_IMM R4, 183

STORE 180, R1
STORE 181, R2
STORE 182, R3
STORE 183, R4


MOV_REG_IMM R1, 184
MOV_REG_IMM R2, 185
MOV_REG_IMM R3, 186
MOV_REG_IMM R4, 187

STORE 184, R1
STORE 185, R2
STORE 186, R3
STORE 187, R4


MOV_REG_IMM R1, 188
MOV_REG_IMM R2, 189
MOV_REG_IMM R3, 190
MOV_REG_IMM R4, 191

STORE 188, R1
STORE 189, R2
STORE 190, R3
STORE 191, R4


MOV_REG_IMM R1, 192
MOV_REG_IMM R2, 193
MOV_REG_IMM R3, 194
MOV_REG_IMM R4, 195

STORE 192, R1
STORE 193, R2
STORE 194, R3
STORE 195, R4


MOV_REG_IMM R1, 196
MOV_REG_IMM R2, 197
MOV_REG_IMM R3, 198
MOV_REG_IMM R4, 199

STORE 196, R1
STORE 197, R2
STORE 198, R3
STORE 199, R4


MOV_REG_IMM R1, 200
MOV_REG_IMM R2, 201
MOV_REG_IMM R3, 202
MOV_REG_IMM R4, 203

STORE 200, R1
STORE 201, R2
STORE 202, R3
STORE 203, R4


MOV_REG_IMM R1, 204
MOV_REG_IMM R2, 205
MOV_REG_IMM R3, 206
MOV_REG_IMM R4, 207

STORE 204, R1
STORE 205, R2
STORE 206, R3
STORE 207, R4


MOV_REG_IMM R1, 208
MOV_REG_IMM R2, 209
MOV_REG_IMM R3, 210
MOV_REG_IMM R4, 211

STORE 208, R1
STORE 209, R2
STORE 210, R3
STORE 211, R4


MOV_REG_IMM R1, 212
MOV_REG_IMM R2, 213
MOV_REG_IMM R3, 214
MOV_REG_IMM R4, 215

STORE 212, R1
STORE 213, R2
STORE 214, R3
STORE 215, R4


MOV_REG_IMM R1, 216
MOV_REG_IMM R2, 217
MOV_REG_IMM R3, 218
MOV_REG_IMM R4, 219

STORE 216, R1
STORE 217, R2
STORE 218, R3
STORE 219, R4


MOV_REG_IMM R1, 220
MOV_REG_IMM R2, 221
MOV_REG_IMM R3, 222
MOV_REG_IMM R4, 223

STORE 220, R1
STORE 221, R2
STORE 222, R3
STORE 223, R4


MOV_REG_IMM R1, 224
MOV_REG_IMM R2, 225
MOV_REG_IMM R3, 226
MOV_REG_IMM R4, 227

STORE 224, R1
STORE 225, R2
STORE 226, R3
STORE 227, R4


MOV_REG_IMM R1, 228
MOV_REG_IMM R2, 229
MOV_REG_IMM R3, 230
MOV_REG_IMM R4, 231

STORE 228, R1
STORE 229, R2
STORE 230, R3
STORE 231, R4


MOV_REG_IMM R1, 232
MOV_REG_IMM R2, 233
MOV_REG_IMM R3, 234
MOV_REG_IMM R4, 235

STORE 232, R1
STORE 233, R2
STORE 234, R3
STORE 235, R4


MOV_REG_IMM R1, 236
MOV_REG_IMM R2, 1
MOV_REG_IMM R3, 238
MOV_REG_IMM R4, 239

STORE 236, R1
STORE 237, R2
STORE 238, R3
STORE 239, R4


MOV_REG_IMM R1, 240
MOV_REG_IMM R2, 241
MOV_REG_IMM R3, 242
MOV_REG_IMM R4, 243

STORE 240, R1
STORE 241, R2
STORE 242, R3
STORE 243, R4


MOV_REG_IMM R1, 244
MOV_REG_IMM R2, 245
MOV_REG_IMM R3, 246
MOV_REG_IMM R4, 247

STORE 244, R1
STORE 245, R2
STORE 246, R3
STORE 247, R4


MOV_REG_IMM R1, 248
MOV_REG_IMM R2, 249
MOV_REG_IMM R3, 250
MOV_REG_IMM R4, 251

STORE 248, R1
STORE 249, R2
STORE 250, R3
STORE 251, R4


MOV_REG_IMM R1, 252
MOV_REG_IMM R2, 253
MOV_REG_IMM R3, 254
MOV_REG_IMM R4, 255

STORE 252, R1
STORE 253, R2
STORE 254, R3
STORE 255, R4

READ R1
READ R2 

STORE 50, R1 
STORE 51, R2 

WLOAD W1, 50 

MOV_REG_IMM R1, 0xD9
MOV_REG_IMM R2, 0x0B
MOV_REG_IMM R3, 0x83 
MOV_REG_IMM R4, 0x20

STORE 69, R1 
STORE 70, R2 
STORE 71, R3
STORE 72, R4 

DLOAD D1, 69 
; KEY IS NOW IN D1 

MOV_REG_IMM R1, 0
STORE 48, R1 
STORE 49, R1 

DLOAD D2, 48

MOV_REG_IMM R1, 32 
MOV_REG_IMM R2, 0
STORE 230, R2
STORE 231, R2 
STORE 232, R2 
MOV_REG_IMM R2, 1
STORE 233, R2 

DLOAD D3, 230
MOV_DREG_DREG D4, D2

SUB R2, R2
MOV_REG_IMM R3, 1

; AT THIS POINT 
; R1 = COUNTER 
; D1 = KEY 
; D2 = INPUT 
; D3 = 1 (for bitwise ANDing)
; R2 = 0 (comparison to exit from loop)
; R3 = 1 (decrement value)

crc_loop:
MOV_DREG_DREG D5, D2  
DAND D5, D3
DCMP D5, D3
JNE do_xor

DSHR D2, 1
SUB R1, R3
CMP R1, R2
JE phase_2
JMP crc_loop

do_xor:
DSHR D2, 1
DXOR D2, D1
SUB R1, R3
CMP R1, R2
JE phase_2
JMP crc_loop

phase_2:
DSTORE 2, D2

READ R1
STORE 50, R1 

MOV_REG_IMM R2, 0
STORE 48, R2
STORE 49, R2 

READ R2

STORE 51, R2

DLOAD D3, 230
MOV_REG_IMM R1, 32
MOV_REG_IMM R3, 1
XOR R2, R2 

DLOAD D2, 48


crc_loop_2:
MOV_DREG_DREG D5, D2  
DAND D5, D3
DCMP D5, D3
JNE do_xor_2

DSHR D2, 1
SUB R1, R3
CMP R1, R2
JE phase_3
JMP crc_loop_2

do_xor_2:
DSHR D2, 1
DXOR D2, D1
SUB R1, R3
CMP R1, R2
JE phase_3
JMP crc_loop_2

phase_3:
DSTORE 6, D2

READ R1
STORE 50, R1 

MOV_REG_IMM R2, 0
STORE 48, R2
STORE 49, R2 

READ R2

STORE 51, R2

DLOAD D3, 230
MOV_REG_IMM R1, 32
MOV_REG_IMM R3, 1
XOR R2, R2 

DLOAD D2, 48


crc_loop_3:
MOV_DREG_DREG D5, D2  
DAND D5, D3
DCMP D5, D3
JNE do_xor_3

DSHR D2, 1
SUB R1, R3
CMP R1, R2
JE phase_4
JMP crc_loop_3

do_xor_3:
DSHR D2, 1
DXOR D2, D1
SUB R1, R3
CMP R1, R2
JE phase_4
JMP crc_loop_3

phase_4:
DSTORE 10, D2

READ R1
STORE 50, R1 

MOV_REG_IMM R2, 0
STORE 48, R2
STORE 49, R2 

READ R2

STORE 51, R2

DLOAD D3, 230
MOV_REG_IMM R1, 32
MOV_REG_IMM R3, 1
XOR R2, R2 

DLOAD D2, 48


crc_loop_4:
MOV_DREG_DREG D5, D2  
DAND D5, D3
DCMP D5, D3
JNE do_xor_4

DSHR D2, 1
SUB R1, R3
CMP R1, R2
JE check_crc32_part
JMP crc_loop_4

do_xor_4:
DSHR D2, 1
DXOR D2, D1
SUB R1, R3
CMP R1, R2
JE check_crc32_part
JMP crc_loop_4

check_crc32_part:
DSTORE 14, D2

; 2,3,4,5 contains the first part 
; 6,7,8,9 contains the second part 
; 10,11,12,13 contains the third part 
; 14,15,16,17 contains the fourth part 

MOV_REG_IMM R1, 0xcc
MOV_REG_IMM R2, 0x9d 
MOV_REG_IMM R3, 0x08 
MOV_REG_IMM R4, 0xcb

STORE 50, R1 
STORE 51, R2 
STORE 52, R3 
STORE 53, R4 

DLOAD D1, 50
DLOAD D2, 2

DCMP D1, D2 
JNE first_pair_crc32_wrong 
JMP first_pair_crc32_correct 

first_pair_crc32_wrong:
LOAD R1, 237 
MOV_REG_IMM R2, 0
AND R1, R2
STORE 237, 0

first_pair_crc32_correct:
NOP

MOV_REG_IMM R1, 0xf6 
MOV_REG_IMM R2, 0xa2 
MOV_REG_IMM R3, 0x97 
MOV_REG_IMM R4, 0x95

STORE 50, R1 
STORE 51, R2 
STORE 52, R3 
STORE 53, R4 

DLOAD D1, 50
DLOAD D2, 6

DCMP D1, D2 
JNE second_pair_crc32_wrong 
JMP second_pair_crc32_correct 

second_pair_crc32_wrong:
LOAD R1, 237 
MOV_REG_IMM R2, 0
AND R1, R2
STORE 237, 0

second_pair_crc32_correct:
NOP

MOV_REG_IMM R1, 0x5c
MOV_REG_IMM R2, 0x12 
MOV_REG_IMM R3, 0xd7 
MOV_REG_IMM R4, 0x54

STORE 50, R1 
STORE 51, R2 
STORE 52, R3 
STORE 53, R4 

DLOAD D1, 50
DLOAD D2, 10

DCMP D1, D2 
JNE third_pair_crc32_wrong 
JMP third_pair_crc32_correct 

third_pair_crc32_wrong:
LOAD R1, 237 
MOV_REG_IMM R2, 0
AND R1, R2
STORE 237, 0

third_pair_crc32_correct:
NOP

MOV_REG_IMM R1, 0x21
MOV_REG_IMM R2, 0x56 
MOV_REG_IMM R3, 0x3c 
MOV_REG_IMM R4, 0xf9

STORE 50, R1 
STORE 51, R2 
STORE 52, R3 
STORE 53, R4 

DLOAD D1, 50
DLOAD D2, 14

DCMP D1, D2 
JNE fourth_pair_crc32_wrong 
JMP fourth_pair_crc32_correct 

fourth_pair_crc32_wrong:
LOAD R1, 237 
MOV_REG_IMM R2, 0
AND R1, R2
STORE 237, 0

fourth_pair_crc32_correct:
NOP

MOV_REG_IMM R1, 0
STORE 0, R1

MOV_REG_IMM R1, 1
STORE 1, R1

MOV_REG_IMM R1, 2
STORE 2, R1

MOV_REG_IMM R1, 3
STORE 3, R1

MOV_REG_IMM R1, 4
STORE 4, R1

MOV_REG_IMM R1, 5
STORE 5, R1

MOV_REG_IMM R1, 6
STORE 6, R1

MOV_REG_IMM R1, 7
STORE 7, R1

MOV_REG_IMM R1, 8
STORE 8, R1

MOV_REG_IMM R1, 9
STORE 9, R1

MOV_REG_IMM R1, 10
STORE 10, R1

MOV_REG_IMM R1, 11
STORE 11, R1

MOV_REG_IMM R1, 12
STORE 12, R1

MOV_REG_IMM R1, 13
STORE 13, R1

MOV_REG_IMM R1, 14
STORE 14, R1

MOV_REG_IMM R1, 15 
STORE 15, R1 


MOV_REG_IMM R1, 0xDE 
MOV_REG_IMM R2, 0xAD
MOV_REG_IMM R3, 0xBE
MOV_REG_IMM R4, 0xEF

STORE 50, R1 
STORE 51, R2 
STORE 52, R3 
STORE 53, R4 

MOV_REG_IMM R1, 0xCA 
MOV_REG_IMM R2, 0xFE
MOV_REG_IMM R3, 0xBA
MOV_REG_IMM R4, 0xBE

STORE 54, R1 
STORE 55, R2 
STORE 56, R3 
STORE 57, R4 


ksa:
MOV_REG_IMM R1, 0

LOAD R2, 0 ; R2 = S[i]
ADD R1, R2 ; j = j + S[i]
LOAD R3, 50 ; R3 = key[i % 8]
ADD R1, R3 ; j = j + key[i % 8]
MOV_REG_IMM R5, 0xF
AND R1, R5 ; j = j % 16 
MOV_REG_REG R5, R1 
LOAD R3, 0 ; R3 = S[i]
LOADR R4, R1 ; R4 = S[j]
STORR R1, R3 ; S[j] = R3
STORE 0, R4 ; S[i] = R4 

MOV_REG_REG R1, R5
LOAD R2, 1
ADD R1, R2
LOAD R3, 51
ADD R1, R3
MOV_REG_IMM R5, 0xF
AND R1, R5
MOV_REG_REG R5, R1
LOAD R3, 1
LOADR R4, R1
STORR R1, R3
STORE 1, R4

MOV_REG_REG R1, R5
LOAD R2, 2
ADD R1, R2
LOAD R3, 52
ADD R1, R3
MOV_REG_IMM R5, 0xF
AND R1, R5
MOV_REG_REG R5, R1
LOAD R3, 2
LOADR R4, R1
STORR R1, R3
STORE 2, R4

MOV_REG_REG R1, R5
LOAD R2, 3
ADD R1, R2
LOAD R3, 53
ADD R1, R3
MOV_REG_IMM R5, 0xF
AND R1, R5
MOV_REG_REG R5, R1
LOAD R3, 3
LOADR R4, R1
STORR R1, R3
STORE 3, R4

MOV_REG_REG R1, R5
LOAD R2, 4
ADD R1, R2
LOAD R3, 54
ADD R1, R3
MOV_REG_IMM R5, 0xF
AND R1, R5
MOV_REG_REG R5, R1
LOAD R3, 4
LOADR R4, R1
STORR R1, R3
STORE 4, R4

MOV_REG_REG R1, R5
LOAD R2, 5
ADD R1, R2
LOAD R3, 55
ADD R1, R3
MOV_REG_IMM R5, 0xF
AND R1, R5
MOV_REG_REG R5, R1
LOAD R3, 5
LOADR R4, R1
STORR R1, R3
STORE 5, R4

MOV_REG_REG R1, R5
LOAD R2, 6
ADD R1, R2
LOAD R3, 56
ADD R1, R3
MOV_REG_IMM R5, 0xF
AND R1, R5
MOV_REG_REG R5, R1
LOAD R3, 6
LOADR R4, R1
STORR R1, R3
STORE 6, R4

MOV_REG_REG R1, R5
LOAD R2, 7
ADD R1, R2
LOAD R3, 57
ADD R1, R3
MOV_REG_IMM R5, 0xF
AND R1, R5
MOV_REG_REG R5, R1
LOAD R3, 7
LOADR R4, R1
STORR R1, R3
STORE 7, R4

MOV_REG_REG R1, R5
LOAD R2, 8
ADD R1, R2
LOAD R3, 50
ADD R1, R3
MOV_REG_IMM R5, 0xF
AND R1, R5
MOV_REG_REG R5, R1
LOAD R3, 8
LOADR R4, R1
STORR R1, R3
STORE 8, R4

MOV_REG_REG R1, R5
LOAD R2, 9
ADD R1, R2
LOAD R3, 51
ADD R1, R3
MOV_REG_IMM R5, 0xF
AND R1, R5
MOV_REG_REG R5, R1
LOAD R3, 9
LOADR R4, R1
STORR R1, R3
STORE 9, R4

MOV_REG_REG R1, R5
LOAD R2, 10
ADD R1, R2
LOAD R3, 52
ADD R1, R3
MOV_REG_IMM R5, 0xF
AND R1, R5
MOV_REG_REG R5, R1
LOAD R3, 10
LOADR R4, R1
STORR R1, R3
STORE 10, R4

MOV_REG_REG R1, R5
LOAD R2, 11
ADD R1, R2
LOAD R3, 53
ADD R1, R3
MOV_REG_IMM R5, 0xF
AND R1, R5
MOV_REG_REG R5, R1
LOAD R3, 11
LOADR R4, R1
STORR R1, R3
STORE 11, R4

MOV_REG_REG R1, R5
LOAD R2, 12
ADD R1, R2
LOAD R3, 54
ADD R1, R3
MOV_REG_IMM R5, 0xF
AND R1, R5
MOV_REG_REG R5, R1
LOAD R3, 12
LOADR R4, R1
STORR R1, R3
STORE 12, R4

MOV_REG_REG R1, R5
LOAD R2, 13
ADD R1, R2
LOAD R3, 55
ADD R1, R3
MOV_REG_IMM R5, 0xF
AND R1, R5
MOV_REG_REG R5, R1
LOAD R3, 13
LOADR R4, R1
STORR R1, R3
STORE 13, R4

MOV_REG_REG R1, R5
LOAD R2, 14
ADD R1, R2
LOAD R3, 56
ADD R1, R3
MOV_REG_IMM R5, 0xF
AND R1, R5
MOV_REG_REG R5, R1
LOAD R3, 14
LOADR R4, R1
STORR R1, R3
STORE 14, R4

READ R1 
READ R2 
READ R3 
READ R4 
READ R5 
READ R6 
READ R7 
READ R8

STORE 48, R1 
STORE 49, R2 
STORE 50, R3 
STORE 51, R4 
STORE 52, R5 
STORE 53, R6 
STORE 54, R7 
STORE 55, R8 

MOV_REG_IMM R1, 0 
MOV_REG_IMM R2, 16 
MOV_REG_IMM R4, 1 

MOV_REG_IMM R1, 112 
MOV_REG_IMM R2, 164 

DLOAD D1, 112 
DLOAD D2, 164

DSTORE 112, D1 
DSTORE 116, D2 


; key scheduling is done at this point. the shuffled thingy is stored from 0-15 indices in memory 

MOV_REG_IMM R1, 0 
MOV_REG_IMM R2, 8
MOV_REG_IMM R3, 48 
MOV_REG_IMM R4, 0 
MOV_REG_IMM R5, 0 
MOV_REG_IMM R6, 0xf 

QLOAD Q1, 112 
MOV_QREG_QREG Q1, Q1 

; R1 = n
; R4 = i 
; R5 = j 
; R2 = loop_max 
; R3 = input_ptr 
; R6 = mod value

prga_loop:
; i = (i + 1) % 16 
INC R4 
AND R4, R6 

; j = (j + S[i]) % 16
LOADR R7, R4 
ADD R5, R7 
AND R5, R6 

; swap(S[i], S[j])
LOADR R8, R5
STORR R5, R7
STORR R4, R8 

; t = (S[i] + S[j]) % 16
ADD R7, R8
AND R7, R6

; K = S[t]
LOADR R8, R7 

; input[n] = input[n] ^ K
LOADR R7, R3 
XOR R7, R8 
STORR R3, R7 
INC R1 
INC R3 

CMP R1, R2 
JNE prga_loop 

; at this point, 48-56 contains the cipher array 

QLOAD Q2, 48 

QCMP Q1, Q2 
JE rc4_correct 
JMP rc4_incorrect 

rc4_incorrect:
LOAD R1, 237 
MOV_REG_IMM R2, 0
AND R1, R2
STORE 237, 0

rc4_correct:
NOP

; 2 byte xor rolling 
; store the key 

MOV_REG_IMM R1, 0x43 
MOV_REG_IMM R2, 0x5c 

STORE 48, R1 
STORE 49, R2 

WLOAD W1, 48 

READ R1
STORE 50, R1 

READ R2 
STORE 51, R2 

READ R1
STORE 52, R1 

READ R2 
STORE 53, R2 

READ R3 
STORE 54, R3 

READ R1 
STORE 55, R1 

READ R1 
STORE 56, R1 

READ R1 
STORE 57, R1 

WLOAD W2, 50
WXOR W2, W1
WCMP W2, W1

WSTORE 50, W2


WLOAD W2, 51
WXOR W2, W1
WCMP W2, W1

WSTORE 51, W2


WLOAD W2, 52
WXOR W2, W1
WCMP W2, W1

WSTORE 52, W2


WLOAD W2, 53
WXOR W2, W1
WCMP W2, W1

WSTORE 53, W2


WLOAD W2, 54
WXOR W2, W1
WCMP W2, W1

WSTORE 54, W2


WLOAD W2, 55
WXOR W2, W1
WCMP W2, W1

WSTORE 55, W2


WLOAD W2, 56
WXOR W2, W1
WCMP W2, W1

WSTORE 56, W2

MOV_REG_IMM R1, 0x77
MOV_REG_IMM R2, 0x66
MOV_REG_IMM R3, 0x40
MOV_REG_IMM R4, 0x6b
MOV_REG_IMM R5, 0x70
MOV_REG_IMM R6, 0x40
MOV_REG_IMM R7, 0x77
MOV_REG_IMM R8, 0x6d

STORE 60, R1
STORE 61, R2
STORE 62, R3
STORE 63, R4
STORE 64, R5
STORE 65, R6
STORE 66, R7
STORE 67, R8

QLOAD Q1, 50
QLOAD Q2, 60 
QCMP Q1, Q2 
JNE xor_incorrect 
JMP xor_correct 

xor_incorrect:
LOAD R1, 237 
MOV_REG_IMM R2, 0
AND R1, R2
STORE 237, 0

xor_correct:
NOP

; final check 
MOV_REG_IMM R1, 0x64 
MOV_REG_IMM R2, 0x65 
MOV_REG_IMM R3, 0x5F 
MOV_REG_IMM R4, 0x73 
MOV_REG_IMM R5, 0x37 
MOV_REG_IMM R6, 0x75 
MOV_REG_IMM R7, 0x66 
MOV_REG_IMM R8, 0x66

STORE 100, R1 
STORE 101, R2 
STORE 102, R3 
STORE 103, R4 
STORE 104, R5 
STORE 105, R6 
STORE 106, R7 
STORE 107, R8 

READ R1 
READ R2 
READ R3 
READ R4 
READ R5 
READ R6 
READ R7 
READ R8

STORE 70, R1 
STORE 71, R2 
STORE 72, R3 
STORE 73, R4 
STORE 74, R5 
STORE 75, R6 
STORE 76, R7 
STORE 77, R8

QLOAD Q1, 100
QLOAD Q2, 70
QCMP Q1, Q2
JNE final_incorrect 
JMP final_correct 

final_incorrect:
LOAD R1, 237 
MOV_REG_IMM R2, 0
AND R1, R2
STORE 237, 0

final_correct:
NOP

final:
HALT