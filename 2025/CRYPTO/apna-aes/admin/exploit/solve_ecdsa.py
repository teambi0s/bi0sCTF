from sage.all import *
from hashlib import sha256

r = 75188570313431311860804303251549254089807291132108761029130443888999271228837
s = 28425244802253213823226413962559295239693382541446853572606143356013575587849
p = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f
E = EllipticCurve(GF(p), [0, 7])
G = E(55066263022277343669578718895168534326250603453777594175500187360389116729240, 32670510020758816978083085130507043184471273380659243275938904335757337482424)
n = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141

h = int(sha256(b"Karmany-evadhikaras te ma phalesu kadacana ma karma-phala-hetur bhur ma te sango 'stv akarmani.").hexdigest(), 16)
Q = E(75734809163232403156751567099323868969251536315520212930406362087044311009812, 59376216810615307969183220664321477461374978580814681880833956961200252954411)

X128 = 1 << 128
hmsb = h >> 128

A = X128 - s * inverse_mod(r, n)
b = (h - X128 * s * hmsb) * inverse_mod(r, n)

M = Matrix(ZZ, [
    [n, 0, 0], 
    [-A, 1, 0], 
    [b, 0, -X128]
])

L = M.LLL()

for row in L:
    if abs(row[2]) != X128:
        continue

    if row[2] == -X128:
        row = -row

    dmsb, dlsb = row[1], row[0]
    d = (dmsb << 128) + dlsb
    k = (hmsb << 128) + dmsb

    if d * G == Q and Mod((k * G)[0], n) == r:
        print(f"{d = }")
