from pwn import remote, xor
import json

def encode(data):
    P.<x> = ComplexField(128)[]
    poly = 0
    for i in range(len(data)):
        poly += data[i] * x ^ i
    return poly.roots()[1][0]

def decode(r : str):
    C = ComplexField(128)
    real = [(r ^ i)[0] for i in range(16)]
    imag = [(r ^ i)[1] for i in range(16)]
    K = 2 ** (128 - 1)
    M = matrix([[round(K * x) for x in real], [round(K * x) for x in imag]]).T.augment(
        matrix.identity(16)
    )
    data = bytes([abs(x) for x in M.LLL()[0][2:]])
    return data

C = ComplexField(128)
io = remote('localhost', 1337)
io.sendline(json.dumps({"option": "get_secret"}).encode())
response = json.loads(io.recvline().decode())
a = C(response['encoded_secret'])
new_seed = xor(bytes.fromhex(response['user_seed']), b'\x00\x00\x00\x01')
io.sendline(json.dumps({"option": "encode", "data": b'yellow submarine'.hex(), "user_seed": response['user_seed'].hex()}).encode())
response = json.loads(io.recvline().decode())
b = C(response['encoded_data'])

c = encode(b'yellow submarine')
error = b - c
f = a - error
secret = decode(f)
io.sendline(json.dumps({"option": "verify", "user_secret": secret.hex()}).encode())
response = json.loads(io.recvline().decode())
if 'flag' in response:
    print("Flag:", response['flag'])
