

# This file was *autogenerated* from the file chall.sage
from sage.all_cmdline import *   # import sage library

_sage_const_44 = Integer(44); _sage_const_2 = Integer(2); _sage_const_0xBAD2C0DE = Integer(0xBAD2C0DE); _sage_const_0x6969 = Integer(0x6969); _sage_const_1 = Integer(1); _sage_const_91 = Integer(91); _sage_const_100 = Integer(100)
from Crypto.Util.number import *
from secrets import FLAG

assert len(FLAG) == _sage_const_44 
FLAG_FORMAT = "bi0s"

NBITS = len(FLAG)<<_sage_const_2 

a = _sage_const_0xBAD2C0DE 
c = _sage_const_0x6969 
m = _sage_const_1 <<NBITS
seed = getRandomNBitInteger(NBITS)
state = seed

ciphertext = []

for i,f in enumerate(FLAG):
    state = (state*a+c)%m
    ciphertext.append((state>>(NBITS>>_sage_const_1 ))^i^ord(f))

public = [_sage_const_1 ]
for i in range(_sage_const_2 , _sage_const_91 ):
    public.append(public[-_sage_const_1 ]*i)
q = sum(public)
while True:
    r = getRandomInteger(_sage_const_100 )
    if GCD(r, q) == _sage_const_1 :
        break

B = [r*i % q for i in public]

def encrypt(ct):
    blen = ct.bit_length()
    ct = bin(ct)[_sage_const_2 :]
    ct = [int(i) for i in ct]
    ct = [ct[i]*B[i] for i in range(len(ct))]
    return blen, sum(ct)

ct = []
for i in ciphertext:
    ct.append(encrypt(i))

# save ct into file
with open("ct.txt", "w") as f:
    f.write(str(ct))
print(r)

