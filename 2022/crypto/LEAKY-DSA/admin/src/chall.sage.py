

# This file was *autogenerated* from the file chall.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff = Integer(0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff); _sage_const_0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc = Integer(0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc); _sage_const_0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b = Integer(0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b); _sage_const_0 = Integer(0); _sage_const_8 = Integer(8); _sage_const_1 = Integer(1); _sage_const_120 = Integer(120); _sage_const_2 = Integer(2)
from Crypto.Util.number import *
from secret import flag
from hashlib import sha256

p = _sage_const_0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff 
a = _sage_const_0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc 
b = _sage_const_0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b 

E = EllipticCurve(GF(p), [a,b])
G = E.gens()[_sage_const_0 ]
q = G.order()
priv = Integer(bytes_to_long(flag))

def sign(msg, d):
    k = int.from_bytes(sha256(int(d).to_bytes(d.nbits()//_sage_const_8  + _sage_const_1 , 'big') + sha256(msg).digest()).digest(), 'big')
    z = int.from_bytes(sha256(msg).digest(),'big')
    r = int((k * G)[_sage_const_0 ]) % q
    s = (inverse_mod(k, q) * (z + d * r)) % q
    leak_k = (k >> _sage_const_120 ) << _sage_const_120 
    return z, r, s, leak_k

for i in range(_sage_const_2 ):
    msg = input("Enter message: ").encode()
    print(sign(msg, priv))

