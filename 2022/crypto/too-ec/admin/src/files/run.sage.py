

# This file was *autogenerated* from the file run.sage
from sage.all_cmdline import *   # import sage library

_sage_const_11756567260683217973317821468013902925071857221209186747934466797087880003950030193785985576077722893781732403392136085606507535332326930255509329556456347 = Integer(11756567260683217973317821468013902925071857221209186747934466797087880003950030193785985576077722893781732403392136085606507535332326930255509329556456347); _sage_const_284714395592149985031071990064722603855564247389538236878682710552855514777811243873118923924323181542656848585973193167859733308878913768997124222623467 = Integer(284714395592149985031071990064722603855564247389538236878682710552855514777811243873118923924323181542656848585973193167859733308878913768997124222623467); _sage_const_6691650159000762838310818461581190062553047897575015587337603592580333224793723463850872931945734336439769314392536267909443115859245856541836553263948753 = Integer(6691650159000762838310818461581190062553047897575015587337603592580333224793723463850872931945734336439769314392536267909443115859245856541836553263948753); _sage_const_10790881175634558072269092254265802368362184550725174949593446030728701377842190431295222081606639424090650863572579036266274201231740288458629763480758313 = Integer(10790881175634558072269092254265802368362184550725174949593446030728701377842190431295222081606639424090650863572579036266274201231740288458629763480758313); _sage_const_501825392150441176175728536671705829555714973361100909579834429968064243697851483241083792599402881866011389914665565694449484329836527749246854277502643 = Integer(501825392150441176175728536671705829555714973361100909579834429968064243697851483241083792599402881866011389914665565694449484329836527749246854277502643); _sage_const_1291619760902660387903505043454584215818295063211936290200646344457970633763165896027212915277161704232069970670816281868294804457737375861177780690688002 = Integer(1291619760902660387903505043454584215818295063211936290200646344457970633763165896027212915277161704232069970670816281868294804457737375861177780690688002); _sage_const_2013900655880801394301932124541532957055873092184807974244791201173073873430583423201811343848166837511621243766087891082508992352198637601420395625191527 = Integer(2013900655880801394301932124541532957055873092184807974244791201173073873430583423201811343848166837511621243766087891082508992352198637601420395625191527); _sage_const_9133643327953235299057835301736694905103266155388717552464057338789621564626214137183651462439552354223717069640511352515215754704110615697102812193902133 = Integer(9133643327953235299057835301736694905103266155388717552464057338789621564626214137183651462439552354223717069640511352515215754704110615697102812193902133); _sage_const_11756567260683217973317821468013902925071857221209186747934466797087880003950056062657934676411779626195749253116443260159222430077031406604031496483294819 = Integer(11756567260683217973317821468013902925071857221209186747934466797087880003950056062657934676411779626195749253116443260159222430077031406604031496483294819); _sage_const_10790881175634558072269092254265802368362184550725174949593446030728701377842120947468767689818768068635638355158161266058040366019788593081905254490911663 = Integer(10790881175634558072269092254265802368362184550725174949593446030728701377842120947468767689818768068635638355158161266058040366019788593081905254490911663); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_5 = Integer(5); _sage_const_48 = Integer(48); _sage_const_1 = Integer(1)
from hashlib import md5
from Crypto.Util.number import bytes_to_long, long_to_bytes
#from sage.all import *
p1 = _sage_const_11756567260683217973317821468013902925071857221209186747934466797087880003950030193785985576077722893781732403392136085606507535332326930255509329556456347 
a1 = _sage_const_284714395592149985031071990064722603855564247389538236878682710552855514777811243873118923924323181542656848585973193167859733308878913768997124222623467 
b1 = _sage_const_6691650159000762838310818461581190062553047897575015587337603592580333224793723463850872931945734336439769314392536267909443115859245856541836553263948753 

p2 = _sage_const_10790881175634558072269092254265802368362184550725174949593446030728701377842190431295222081606639424090650863572579036266274201231740288458629763480758313 
a2 = _sage_const_501825392150441176175728536671705829555714973361100909579834429968064243697851483241083792599402881866011389914665565694449484329836527749246854277502643 
b2 = _sage_const_1291619760902660387903505043454584215818295063211936290200646344457970633763165896027212915277161704232069970670816281868294804457737375861177780690688002 

g1 = _sage_const_2013900655880801394301932124541532957055873092184807974244791201173073873430583423201811343848166837511621243766087891082508992352198637601420395625191527 
g2 = _sage_const_9133643327953235299057835301736694905103266155388717552464057338789621564626214137183651462439552354223717069640511352515215754704110615697102812193902133 

o1 = _sage_const_11756567260683217973317821468013902925071857221209186747934466797087880003950056062657934676411779626195749253116443260159222430077031406604031496483294819 
o2 = _sage_const_10790881175634558072269092254265802368362184550725174949593446030728701377842120947468767689818768068635638355158161266058040366019788593081905254490911663 


_p  = "e078e75b3313660ec08eefcdfe98ca82ecea4f3483ce9055?????????05fa57d82f??????????525966d8eca5d968b96ca03e60f1b0a13cbd??????????ac39b"


FLAG = b'bi0sctf{ecdsa_on_2_curves_is_not_secure_at_all_33e4a456fd}'

priv1 = bytes_to_long(FLAG[:len(FLAG)//_sage_const_2 ])
priv2 = bytes_to_long(FLAG[len(FLAG)//_sage_const_2 :])

def sign_1(msg):
    hsh = md5(msg).digest()
    nonce = md5(long_to_bytes(priv1) + hsh).digest()
    hsh, nonce = bytes_to_long(hsh), bytes_to_long(nonce)
    r = int((nonce * G1)[_sage_const_0 ]) % q1
    s = (inverse_mod(nonce, q1) * (hsh + priv1 * r)) % q1
    return r, s

def sign_2(msg):
    hsh = md5(msg).digest()
    nonce = md5(long_to_bytes(priv2) + hsh).digest()
    hsh, nonce = bytes_to_long(hsh), bytes_to_long(nonce)
    r = int((nonce * G2)[_sage_const_0 ]) % q2
    s = (inverse_mod(nonce, q2) * (hsh + priv2 * r)) % q2
    return r, s

E1 = EllipticCurve(GF(p1),[a1,b1])
G1 = E1.lift_x(g1)
q1 = o1
E2 = EllipticCurve(GF(p2),[a2,b2])
G2 = E2.lift_x(g2)
q2 = o2

print("N = "+str(hex(p1*p2)))
print("p1 = "+str(_p))

print("a1 = "+str(hex(a1)))
print("b1 = "+str(hex(b1)))

print("a2 = "+str(hex(a2)))
print("b12= "+str(hex(b2)))



i = _sage_const_0 
while i<_sage_const_5 :
    print("______________________")
    print("| 1 -> View Soure    |")
    print("| 2 -> Sign Message  |")
    print("| 3 -> Exit          |")
    print("¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯")
    choice = input("Enter your choice: ")
    if choice == "1":
        print(open("chall.sage").read())
    elif choice == "2":
        msg = input("Enter message to sign: ")
        if len(msg)>_sage_const_48 :
            print("Signature: ")
            # encode msg to bytes
            msg = bytes(msg, 'utf-8')
            print("Signature from Curve 1: "+str(sign_1(msg)))
            print("Signature from Curve 2: "+str(sign_2(msg)))
            i+=_sage_const_1 
        else:
            print("Message too short!")
    elif choice == "3":
        i +=_sage_const_5 

print("Bye!")


