from pwn import *
from gmssl.sm4 import CryptSM4, SM4_ENCRYPT, SM4_DECRYPT


#The rax reg after every subtraction operator should be 0.
p1 = [0x93, 0xa3, 0xf3, 0xcd] # These 4 bytes are subtracted with enc[0..3], then the difference is added to enc[4..7]
k1 = [0x13, 0x37, 0xbe, 0xef] # This key is used to xor with value in enc[4..7]
x1 = [0x33, 0xae, 0xf5, 0xcb] # Result of k1 XOR enc[4..7]
x2 = [0x55, 0x0d, 0x68, 0xce] # Result of enc[8..11] XOR enc[16..19]
x3 = [0x5f, 0x97, 0x51, 0xeb] # Result of enc[8..11] XOR enc[12..15]
x4 = [0x04, 0xaa, 0x34, 0xa4] # Result of enc[28..31] XOR enc[20..23]
x5 = [0x2c, 0x78, 0x65, 0x53] # Result of enc[28..31] XOR enc[24..27]
x6 = [0x74, 0x18, 0x00, 0x51] # Result of enc[8..11] XOR enc[12..15] XOR enc[16..19]
x7 = [0x3e, 0x07, 0x99, 0x4c] # Result of enc[20..23] XOR enc[28..31] XOR enc[24..27]
p2 = [0]*4
p3 = [0]*4
p4 = [0]*4
p5 = [0]*4
p6 = [0]*4
p7 = [0]*4
p8 = [0]*4
for i in range(4):
    p2[i] = k1[i] ^ x1[i]
    p5[i] = x3[i] ^ x6[i]
    p4[i] = x2[i] ^ x6[i]
    p3[i] = x2[i] ^ p5[i]
    p6[i] = x5[i] ^ x7[i]
    p7[i] = x4[i] ^ x7[i]
    p8[i] = x4[i] ^ p6[i]

crypt_sm4 = CryptSM4()

enc = p1+p2+p3+p4+p5+p6+p7+p8
key = b"UBHPjBKlsQ2TuNSk"
iv = b"7y0M69TQScm7mfXv"
crypt_sm4.set_key(key, SM4_DECRYPT)
plain_text = crypt_sm4.crypt_cbc(iv, enc)
print(plain_text)